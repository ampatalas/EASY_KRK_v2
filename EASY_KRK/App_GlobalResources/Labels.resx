<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Category" xml:space="preserve">
    <value>Kategoria:</value>
  </data>
  <data name="CNPS" xml:space="preserve">
    <value>CNPS:</value>
  </data>
  <data name="CNPSAmountError" xml:space="preserve">
    <value>CNPS musi być większe od 0.</value>
  </data>
  <data name="CodeErrorEmpty" xml:space="preserve">
    <value>Kod przedmiotu nie może być pusty.</value>
  </data>
  <data name="CodeErrorExpression" xml:space="preserve">
    <value>Kod przedmiotu może zawierać tylko znaki alfanumeryczne.</value>
  </data>
  <data name="CodeErrorLength" xml:space="preserve">
    <value>Kod przedmiotu musi zawierać od 3 do 15 znaków.</value>
  </data>
  <data name="CourseCode" xml:space="preserve">
    <value>Kod kursu:</value>
  </data>
  <data name="CourseECTS" xml:space="preserve">
    <value>Punkty ECTS:</value>
  </data>
  <data name="CourseForm" xml:space="preserve">
    <value>Forma zajęć:</value>
  </data>
  <data name="CoursePractical" xml:space="preserve">
    <value>Praktyczny?</value>
  </data>
  <data name="ECTSAmountError" xml:space="preserve">
    <value>Liczba punktów ECTS musi być większa od 0.</value>
  </data>
  <data name="ECTSBK" xml:space="preserve">
    <value>Punkty ECTS (BK):</value>
  </data>
  <data name="ECTSBKAmountError" xml:space="preserve">
    <value>Liczba punktów ECTS_BK musi być większa lub równa 0.</value>
  </data>
  <data name="ECTSBKECTSAmountError" xml:space="preserve">
    <value>Liczba punktów ECTS_BK nie może przekraczać całkowitej liczby ECTS.</value>
  </data>
  <data name="ECTSP" xml:space="preserve">
    <value>Punkty ECTS (P):</value>
  </data>
  <data name="ECTSPAmountError" xml:space="preserve">
    <value>Liczba punktów ECTS_P musi być większa lub równa 0.</value>
  </data>
  <data name="ECTSPECTSAmountError" xml:space="preserve">
    <value>Liczba punktów ECTS_P nie może przekraczać całkowitej liczby ECTS.</value>
  </data>
  <data name="NameErrorEmpty" xml:space="preserve">
    <value>Nazwa przedmiotu nie może być pusta.</value>
  </data>
  <data name="NameErrorExpression" xml:space="preserve">
    <value>Nazwa przedmiotu może zawierać tylko cyfry lub litery alfabetu polskiego.</value>
  </data>
  <data name="NameErrorLength" xml:space="preserve">
    <value>Nazwa przedmiotu musi zawierać od 3 do 100 znaków.</value>
  </data>
  <data name="SubjectCode" xml:space="preserve">
    <value>Kod przedmiotu: </value>
  </data>
  <data name="SubjectCodeExists" xml:space="preserve">
    <value>Przedmiot o podanym kodzie już istnieje.</value>
  </data>
  <data name="SubjectForm" xml:space="preserve">
    <value>Forma:</value>
  </data>
  <data name="SubjectKind" xml:space="preserve">
    <value>Rodzaj:</value>
  </data>
  <data name="SubjectName" xml:space="preserve">
    <value>Nazwa przedmiotu:</value>
  </data>
  <data name="SubjectNameExists" xml:space="preserve">
    <value>Przedmiot o podanej nazwie już istnieje.</value>
  </data>
  <data name="SubjectType" xml:space="preserve">
    <value>Typ:</value>
  </data>
  <data name="SubjectUni" xml:space="preserve">
    <value>Ogólnouczelniany?</value>
  </data>
  <data name="ZZU" xml:space="preserve">
    <value>ZZU:</value>
  </data>
  <data name="ZZUAmountError" xml:space="preserve">
    <value>ZZU musi być większe od 0.</value>
  </data>
  <data name="PassForm" xml:space="preserve">
    <value>Forma zaliczenia:</value>
  </data>
</root>